version: 2.1

orbs:
  slack: circleci/slack@3.4.1

references:
  _restore-cache: &restore-cache
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v2-dependencies-

  _install-dependencies: &install-dependencies
    run:
      name: Install dependencies
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle check || bundle install --jobs=4 --retry=3 --path vendor/bundle

  _save-cache: &save-cache
    save_cache:
      key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  _attach-tmp-workspace: &attach-tmp-workspace
      attach_workspace:
        at: ~/repo/tmp

  _create-tmp-dir: &create-tmp-dir
    run:
      name: Create workspace temporary directories
      command: |
        mkdir -p tmp/
        mkdir -p tmp/coverage/

  _install-codeclimate: &install-codeclimate
    run:
      name: Install Code Climate test-reporter
      command: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > tmp/cc-test-reporter
        chmod +x tmp/cc-test-reporter

  _persist-codeclimate: &persist-codeclimate
    persist_to_workspace:
      root: tmp
      paths:
        - cc-test-reporter

  _wait-for-db: &wait-for-db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  _load-db: &load-db
    run:
      name: Database setup
      command: bin/rails db:schema:load --trace

  _rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop

  _brakeman: &brakeman
    run:
      name: Run brakeman
      command: bundle exec brakeman

  _jasmine: &jasmine
    run:
      name: Run jasmine
      command: bundle exec rake jasmine:ci

  _rspec: &rspec
    run:
      name: Run rspec tests
      command: |
        tmp/cc-test-reporter before-build
        TESTS=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split)
        bundle exec rspec ${TESTS}
        tmp/cc-test-reporter format-coverage -t simplecov -o "tmp/coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

  _cucumber: &cucumber
    run:
        name: Run cucumber tests
        command: |
          FEATURES=$(circleci tests glob "features/**/*.feature" | circleci tests split)
          bundle exec cucumber ${FEATURES} --format progress --color

  _install-wkhtmltopdf: &install-wkhtmltopdf
    run:
      name: Install wkhtmltopdf
      command: |
        sudo apt-get update && sudo apt-get -y install wkhtmltopdf

  _script-build-app-container: &script-build-app-container
    run:
        name: Build and push cccd docker image
        command: |
          .circleci/build.sh

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-get-paid
        REPO_NAME: cccd

  smoke-test-executor:
    working_directory: /usr/src/app
    docker:
      - image: ${ECR_ENDPOINT}/laa-get-paid/cccd:app-latest
        entrypoint: |
          docker/docker-entrypoint.sh
        environment:
          BASH: true
          RAILS_ENV: test
          ADVOCATE_PASSWORD: just-be-present
          CASE_WORKER_PASSWORD: just-be-present
          ADMIN_PASSWORD: just-be-present
          SECRET_KEY_BASE: just-be-present
          SUPERADMIN_USERNAME: superadmin@circleci.com
          SUPERADMIN_PASSWORD: just-be-present
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/cccd_smoke_test
          TZ: Europe/London
          GITHUB_TEAM_NAME_SLUG: laa-get-paid
          REPO_NAME: cccd
          LIVE1_DB_TASK: none
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: cccd_smoke_test

  test-executor:
    working_directory: ~/repo
    docker:
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/cccd_test
          TZ: Europe/London
          GITHUB_TEAM_NAME_SLUG: laa-get-paid
          REPO_NAME: cccd
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "circleci"
          POSTGRES_DB: cccd_test

# ------------------
# COMMANDS
# ------------------
commands:
  build-base:
    steps:
      - *restore-cache
      - *install-dependencies
      - *save-cache

  deploy-to:
    description: >
      Deploy CCCD to the specified environment
    parameters:
      environment:
        description: destination environment
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: deploying ${CIRCLE_BRANCH} to << parameters.environment >>
          command: |
            .circleci/deploy.sh << parameters.environment >>
      - slack/status:
          success_message: ":tada: deploy of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> to << parameters.environment >> successful!"
          failure_message: ":red_circle: deploy of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> to << parameters.environment >> failed!"

  smoke-test:
     steps:
      - run:
          name: Persistence - prepare result storage
          command: mkdir -p /tmp/smoke_test
      - run:
          name: Run smoke test
          command: |
            if ./runtests.sh; then
              echo 'true' > /tmp/smoke_test/success
            else
              echo 'false' > /tmp/smoke_test/success
            fi
      - persist_to_workspace:
          root: /tmp/smoke_test
          paths:
            - success

  smoke-test-notification:
    steps:
      - attach_workspace:
          at: /tmp/smoke_test
      - run:
          name: Setting - determine success of smoke test
          command: |
            if [[ `cat /tmp/smoke_test/success` == "true" ]]; then
              echo "Smoke test succeeded!";
              echo 'export CUSTOM_SLACK_MESSAGE=":tada: smoke test of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> successful!"' >> $BASH_ENV
              echo 'export CUSTOM_SLACK_COLOR="#008000"' >> $BASH_ENV
              exit 0
            else
              echo 'export CUSTOM_SLACK_MESSAGE=":no_smoking: smoke test <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> failed!"' >> $BASH_ENV
              echo 'export CUSTOM_SLACK_COLOR="#FF0000"' >> $BASH_ENV
              echo "Smoke test failed!";
            fi
      - slack/notify:
          title: ":smoke_it: Smoke test"
          message: $CUSTOM_SLACK_MESSAGE
          color: $CUSTOM_SLACK_COLOR

# ------------------
# JOBS
# ------------------
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker
      - *create-tmp-dir
      - *install-codeclimate
      - *persist-codeclimate
      - build-base

  smoke-test:
    executor: smoke-test-executor
    steps:
      - smoke-test

  smoke-test-notification:
    executor: slack/alpine
    steps:
      - smoke-test-notification

  rspec-tests:
    executor: test-executor
    parallelism: 4
    steps:
      - checkout
      - build-base
      - *install-wkhtmltopdf
      - *wait-for-db
      - *load-db
      - *attach-tmp-workspace
      - *rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - coverage/codeclimate.*.json
      - store_artifacts:
          path: tmp/coverage

  cucumber-tests:
    executor: test-executor
    parallelism: 2
    steps:
      - checkout
      - build-base
      - *install-wkhtmltopdf
      - *wait-for-db
      - *load-db
      - *cucumber
      - store_artifacts:
          path: tmp/capybara

  other-tests:
    executor: test-executor
    steps:
      - checkout
      - build-base
      - *rubocop
      - *brakeman
      - *jasmine

  upload-coverage:
    executor: test-executor
    steps:
      - *attach-tmp-workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            tmp/cc-test-reporter sum-coverage --output - --parts 4 tmp/coverage/codeclimate.*.json | tmp/cc-test-reporter upload-coverage --input -

  build-app-container:
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker
      - *script-build-app-container

  hold-notification:
    executor: cloud-platform-executor
    steps:
      - run:
          name: Set slack options for branch
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo 'export CUSTOM_SLACK_COLOR="#FF8C00"' >> $BASH_ENV
            else
              echo 'export CUSTOM_SLACK_COLOR="#3AA3E3"' >> $BASH_ENV
            fi
      - slack/approval:
          color: $CUSTOM_SLACK_COLOR
          message: "Deployment of <$CIRCLE_BUILD_URL|$CIRCLE_BRANCH> pending approval"

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev

  deploy-staging:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: staging

  deploy-api-sandbox:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: api-sandbox

  deploy-production:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: production

  auto-deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-test-container
      - other-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - cucumber-tests:
          requires:
            - build-test-container
      - upload-coverage:
          requires:
            - rspec-tests
            - cucumber-tests
            - other-tests
      - build-app-container:
          requires:
            - upload-coverage
      - smoke-test:
          requires:
            - build-app-container
          filters:
            branches:
              only:
                - master
      - auto-deploy-dev:
          requires:
            - build-app-container
          filters:
            branches:
              only:
                - master
      - hold-notification:
          requires:
            - build-app-container
      - hold-dev:
          type: approval
          requires:
            - hold-notification
          filters:
            branches:
              ignore:
                - master
      - deploy-dev:
          requires:
            - hold-dev
          filters:
            branches:
              ignore:
                - master
      - hold-api-sandbox:
          type: approval
          requires:
            - hold-notification
      - deploy-api-sandbox:
          requires:
            - hold-api-sandbox
      - hold-staging:
          type: approval
          requires:
            - hold-notification
      - deploy-staging:
          requires:
            - hold-staging
      - hold-production:
          type: approval
          requires:
            - hold-notification
          filters:
            branches:
              only:
                - master
      - deploy-production:
          requires:
            - hold-production

  scheduled-smoke-test:
    triggers:
      - schedule:
          cron: "5 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - smoke-test
      - smoke-test-notification:
          requires:
            - smoke-test
