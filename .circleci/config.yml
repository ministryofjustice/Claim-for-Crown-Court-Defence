# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

aliases:
  _defaults: &defaults
    working_directory: &working_directory ~/repo
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          # BUNDLE_JOBS: 3
          # BUNDLE_PATH: vendor/bundle
          # BUNDLE_RETRY: 3
          CBO_BASE_DATABASE_DATABASE: cccd_test
          PDFTK_PATH: /usr/bin/pdftk
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
          TZ: Europe/London
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: cccd_test
          POSTGRES_PASSWORD: ""

  _restore-cache: &restore-cache
    restore_cache:
      keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

  _install-dependencies: &install-dependencies
    run:
      name: install dependencies
      command: |
        gem install bundler -v 1.17.3
        bundle check || bundle _1.17.3_ install --jobs=4 --retry=3 --path vendor/bundle

  _save-cache: &save-cache
    save_cache:
      key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      paths:
        - ./vendor/bundle

  _attach-repo-workspace: &attach-repo-workspace
    attach_workspace:
      at: ~/repo/

  _attach-tmp-workspace: &attach-tmp-workspace
      attach_workspace:
        at: ~/repo/tmp

  _codeclimate-setup: &codeclimate-setup
    run:
      name: Setup Code Climate test-reporter
      command: |
        mkdir -p tmp/
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
        chmod +x ./tmp/cc-test-reporter

  _wait-for-db: &wait-for-db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  _load-db: &load-db
    run:
      name: Database setup
      command: bin/rails db:schema:load --trace

  _rubocop: &rubocop
    run:
      name: Rubocop
      command: bundle exec rubocop

  _brakeman: &brakeman
    run:
      name: Run brakeman
      command: bundle exec rake brakeman:run

  _jasmine: &jasmine
    run:
      name: Run jasmine tests
      command: bundle exec rake jasmine:ci

  _rspec: &rspec
    run:
      name: Run rspec tests
      command: |
        bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
        ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json

  _cucumber: &cucumber
    run:
        name: Run cucumber tests
        command: bundle exec cucumber --format progress --color

  _install-pdftk: &install-pdftk
    run:
      name: Install PDFTK
      command: |
        sudo apt-get install -y pdftk

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *codeclimate-setup
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - persist_to_workspace:
          root: .
          paths:
            - vendor/bundle

  # rubocop:
  #   <<: *defaults
  #   steps:
  #     - checkout
  #     - *attach-repo-workspace
  #     - *attach-tmp-workspace
  #     - *rubocop

  # brakeman:
  #   <<: *defaults
  #   steps:
  #     - checkout
  #     - *attach-repo-workspace
  #     - *attach-tmp-workspace
  #     - *brakeman

  rspec-tests:
    <<: *defaults
    parallelism: 2
    steps:
      - checkout
      - *attach-repo-workspace
      - *attach-tmp-workspace
      - *install-pdftk
      - *wait-for-db
      - *load-db
      - *rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.backend.json
      - store_artifacts:
          path: ./tmp/codeclimate.backend.json

  cucumber-tests:
    <<: *defaults
    steps:
      - checkout
      - *attach-repo-workspace
      - *attach-tmp-workspace
      - *install-pdftk
      - *wait-for-db
      - *load-db
      - *cucumber
      - store_artifacts:
          path: ./tmp/capybara

  other-tests:
    <<: *defaults
    steps:
      - checkout
      - *attach-repo-workspace
      - *attach-tmp-workspace
      - *rubocop
      - *brakeman
      - *jasmine

  upload-coverage:
    <<: *defaults
    steps:
      - *attach-tmp-workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.backend.json

  # build-prod-container:
  #   docker:
  #     - image: docker:17.03-git
  #       environment:
  #         DSD_APP_NAME: "advocatedefencepayments"
  #         ECR_APP_NAME: "claim-for-crown-court-defence"
  #         ECR_DOCKER_IMAGE: "laa-get-paid/claim-crown-court-defence"
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: 17.03.0-ce
  #         docker_layer_caching: true
  #     - run:
  #         name: Login to the DSD Docker registry
  #         command: |
  #           docker login \
  #             --username $DOCKER_USER \
  #             --password $DOCKER_PASS \
  #             --email $DOCKER_EMAIL \
  #             $DOCKER_REGISTRY
  #     - run:
  #         name: Login to the ECR Docker registry
  #         command: |
  #           apk add --no-cache --no-progress py2-pip
  #           pip install awscli
  #           ecr_login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
  #           ${ecr_login}
  #     - run:
  #         name: Build docker image
  #         command: |
  #           docker build --pull -t $ECR_ENDPOINT/$ECR_APP_NAME -f docker/Dockerfile .
  #           docker tag $ECR_ENDPOINT/$ECR_APP_NAME $ECR_ENDPOINT/$ECR_APP_NAME:$CIRCLE_BUILD_NUM
  #           docker push $ECR_ENDPOINT/$ECR_APP_NAME:$CIRCLE_BUILD_NUM

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - other-tests:
          requires:
            - build
      - rspec-tests:
          requires:
            - build
      - cucumber-tests:
          requires:
            - build
      - upload-coverage:
          requires:
            - rspec-tests
            - cucumber-tests
            - other-tests
