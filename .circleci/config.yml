# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

references:
_cloud-platform-container: &cloud-platform-container
    docker:
    - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
      environment:
        GITHUB_TEAM_NAME_SLUG: laa-get-paid
        REPO_NAME: cccd

  _test-container: &test-container
    working_directory: ~/repo
    docker:
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          CBO_BASE_DATABASE_DATABASE: cccd_test
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
          TZ: Europe/London
          GITHUB_TEAM_NAME_SLUG: laa-get-paid
          REPO_NAME: cccd
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: cccd_test
          POSTGRES_PASSWORD: ""

  _restore-cache: &restore-cache
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v2-dependencies-

  _install-dependencies: &install-dependencies
    run:
      name: Install dependencies
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle check || bundle install --jobs=4 --retry=3 --path vendor/bundle

  _save-cache: &save-cache
    save_cache:
      key: v2-dependencies-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  _attach-tmp-workspace: &attach-tmp-workspace
      attach_workspace:
        at: ~/repo/tmp

  _create-tmp-dir: &create-tmp-dir
    run:
      name: Create workspace temporary directories
      command: |
        mkdir -p tmp/
        mkdir -p tmp/coverage/

  _install-codeclimate: &install-codeclimate
    run:
      name: Install Code Climate test-reporter
      command: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > tmp/cc-test-reporter
        chmod +x tmp/cc-test-reporter

  _persist-codeclimate: &persist-codeclimate
    persist_to_workspace:
      root: tmp
      paths:
        - cc-test-reporter

  _wait-for-db: &wait-for-db
    run:
      name: Wait for DB
      command: dockerize -wait tcp://localhost:5432 -timeout 1m

  _load-db: &load-db
    run:
      name: Database setup
      command: bin/rails db:schema:load --trace

  _rubocop: &rubocop
    run:
      name: Run rubocop
      command: bundle exec rubocop

  _brakeman: &brakeman
    run:
      name: Run brakeman
      command: bundle exec brakeman

  _jasmine: &jasmine
    run:
      name: Run jasmine
      command: bundle exec rake jasmine:ci

  _rspec: &rspec
    run:
      name: Run rspec tests
      command: |
        tmp/cc-test-reporter before-build
        TESTS=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split)
        bundle exec rspec ${TESTS}
        tmp/cc-test-reporter format-coverage -t simplecov -o "tmp/coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

  _cucumber: &cucumber
    run:
        name: Run cucumber tests
        command: |
          FEATURES=$(circleci tests glob "features/**/*.feature" | circleci tests split)
          bundle exec cucumber ${FEATURES} --format progress --color

  _install-wkhtmltopdf: &install-wkhtmltopdf
    run:
      name: Install wkhtmltopdf
      command: |
        sudo apt-get update && sudo apt-get -y install wkhtmltopdf

  _build-docker-image: &build-docker-image
    run:
      name: Build cccd docker image
      command: |
        docker_registry_tag="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:app-${CIRCLE_SHA1}"
        docker build \
          --build-arg VERSION_NUMBER="NOT USED ANYMORE" \
          --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
          --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
          --build-arg LIVE1_DB_TASK=migrate \
          --pull \
          --tag $docker_registry_tag \
          --file docker/Dockerfile .

  _push-docker-image: &push-docker-image
    run:
      name: Push cccd docker image
      command: |
        $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
        docker_registry_tag="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:app-${CIRCLE_SHA1}"
        docker push $docker_registry_tag
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker_registry_latest_tag="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:app-latest"
          docker tag $docker_registry_tag $docker_registry_latest_tag
          docker push $docker_registry_latest_tag
        fi

  _script-deploy-dev: &script-deploy-dev
    run:
      name: deploy to dev
      command: |
        .circleci/deploy.sh dev

  _script-deploy-staging: &script-deploy-staging
    run:
      name: deploy to staging
      command: |
        .circleci/deploy.sh staging

  _script-deploy-api-sandbox: &script-deploy-api-sandbox
    run:
      name: deploy to api-sandbox
      command: |
        .circleci/deploy.sh api-sandbox

  _script-deploy-production: &script-deploy-production
    run:
      name: deploy to production
      command: |
        .circleci/deploy.sh production

jobs:
  build-test-container:
    <<: *test-container
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *create-tmp-dir
      - *install-codeclimate
      - *persist-codeclimate
      - *restore-cache
      - *install-dependencies
      - *save-cache

  rspec-tests:
    <<: *test-container
    parallelism: 4
    steps:
      - checkout
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *install-wkhtmltopdf
      - *wait-for-db
      - *load-db
      - *attach-tmp-workspace
      - *rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - coverage/codeclimate.*.json
      - store_artifacts:
          path: tmp/coverage

  cucumber-tests:
    <<: *test-container
    parallelism: 2
    steps:
      - checkout
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *install-wkhtmltopdf
      - *wait-for-db
      - *load-db
      - *cucumber
      - store_artifacts:
          path: tmp/capybara

  other-tests:
    <<: *test-container
    steps:
      - checkout
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *rubocop
      - *brakeman
      - *jasmine

  upload-coverage:
    <<: *test-container
    steps:
      - *attach-tmp-workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            tmp/cc-test-reporter sum-coverage --output - --parts 4 tmp/coverage/codeclimate.*.json | tmp/cc-test-reporter upload-coverage --input -

  build-and-push-docker:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *build-docker-image
      - *push-docker-image

  deploy-dev:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *script-deploy-dev

  deploy-api-sandbox:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *script-deploy-api-sandbox

  deploy-staging:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *script-deploy-staging

  deploy-production:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *script-deploy-production

  auto-deploy-dev:
    <<: *cloud-platform-container
    steps:
      - checkout
      - setup_remote_docker
      - *script-deploy-dev

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-test-container
      - other-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - cucumber-tests:
          requires:
            - build-test-container
      - upload-coverage:
          requires:
            - rspec-tests
            - cucumber-tests
            - other-tests
      - build-and-push-docker:
          requires:
            - upload-coverage
      - auto-deploy-dev:
          requires:
            - build-and-push-docker
          filters:
            branches:
              only:
                - master
      - hold-dev:
          type: approval
          requires:
            - build-and-push-docker
          filters:
            branches:
              ignore:
                - master
      - deploy-dev:
          requires:
            - hold-dev
          filters:
            branches:
              ignore:
                - master
      - hold-api-sandbox:
          type: approval
          requires:
            - build-and-push-docker
      - deploy-api-sandbox:
          requires:
            - hold-api-sandbox
      - hold-staging:
          type: approval
          requires:
            - build-and-push-docker
      - deploy-staging:
          requires:
            - hold-staging
      - hold-production:
          type: approval
          requires:
            - build-and-push-docker
          filters:
            branches:
              only:
                - master
      - deploy-production:
          requires:
            - hold-production
