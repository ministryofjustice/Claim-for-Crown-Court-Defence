#!/usr/bin/env ruby

require 'json'
require 'open3'
require 'ostruct'

module ECR
  def self.repository_name
    ENV['ECR_REPOSITORY_NAME']
  end

  class Image
    def initialize(hash)
      @object = OpenStruct.new(hash)
    end

    def delete
      command = "aws ecr batch-delete-image --repository-name #{ECR.repository_name} --image-ids imageDigest=#{imageDigest}"
      Open3.popen3(command) do |_stdin, stdout, _stderr, _wait_thr|
        stdout.read
      end
    end

    def method_missing(method_name, *args, &block)
      if @object.respond_to?(method_name)
        @object.send(method_name)
      else
        super
      end
    end

    def respond_to_missing?(method_name, *args)
      @object.respond_to?(:method_name) || super
    end
  end

  class Images
    include Enumerable
    attr_reader :raw

    def initialize(json)
      @raw = json
      @collection = JSON.parse(json)
      @collection.map! { |el| Image.new(el) }
    rescue JSON::ParserError => e
      puts '========= JSON OUTPUT ========'
      puts json
      puts '=========== ERROR ========='
      puts e
      puts '============================'
      raise
    end

    def each(&block)
      @collection.each(&block)
    end

    def delete_all
      each(&:delete)
    end

    def batch_delete_all
      digests = map { |image| { imageDigest: image.imageDigest } }
      command = "aws ecr batch-delete-image --repository-name #{ECR.repository_name} --image-ids \"#{digests.to_json}\""
      Open3.popen3(command) do |_stdin, stdout, _stderr, _wait_thr|
        stdout.read
      end
    end

    def self.where(tag_name:)
      command = "aws ecr describe-images --repository-name #{ECR.repository_name} --query \"imageDetails[?contains(imageTags, \'#{tag_name}\')]\""
      Open3.popen3(command) do |_stdin, stdout, _stderr, _wait_thr|
        Images.new(stdout.read)
      end
    end
  end
end

module GithubAction
  class << self
    def event_file
      @event_file ||= ENV['GITHUB_EVENT_PATH']
    end

    def event
      @event ||= JSON.parse(File.read(event_file), symbolize_names: true)
    end

    def tag_name
      @tag_name ||= "app-#{branch_name.tr('\/', '-')}-latest" if branch_name
    end

    def branch_name
      @branch_name ||= event[:ref] if event[:ref_type].eql?('branch')
    end

    def output(text)
      system("echo ::set-output name=deleted-images::#{text}")
    end
  end
end

puts "Looking for #{GithubAction.tag_name}!"
images = ECR::Images.where(tag_name: GithubAction.tag_name)
puts "Found #{images.count} matching images!"
images.delete_all

GithubAction.output("Deleted ECR images: #{images.count}")

