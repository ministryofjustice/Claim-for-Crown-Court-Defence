CREATE OR REPLACE FUNCTION journeys(in_claim_id int)
RETURNS TABLE(journey jsonb)
COST 100
STABLE
AS
$BODY$
DECLARE
  rec record;
  transition jsonb;
  slice jsonb := '[]'::jsonb;
  filtered_states constant varchar[] := array['draft', 'archived_pending_delete' , 'archived_pending_review'];
  completed_states constant varchar[] := array['rejected', 'refused', 'authorised', 'part_authorised'];
BEGIN
  for rec in (
    with transitions as (
      select t.claim_id,
             t.from,
             t.to,
             t.created_at at time zone 'utc' at time zone 'Europe/London' as created_at,
             t.reason_code,
             t.reason_text,
             (authors.first_name || ' ' || authors.last_name) as author_name,
             (subjects.first_name || ' ' || subjects.last_name) as subject_name
      from claim_state_transitions t
      left outer join users as authors
        on t.author_id = authors.id
      left outer join users as subjects
        on t.subject_id = subjects.id
      where t.claim_id = in_claim_id
      and t.to not in (select * from unnest(filtered_states))
      and DATE_TRUNC('day', t.created_at at time zone 'utc' at time zone 'Europe/London') >= DATE_TRUNC('day', (current_date - '6 months'::interval) at time zone 'utc' at time zone 'Europe/London')
    )
    select t.claim_id,
           jsonb_agg(to_jsonb(t) order by t.created_at asc) as transitions
    from transitions t
    group by t.claim_id
  ) loop
    slice := '[]'::jsonb;

    for transition in (select jsonb_array_elements(rec.transitions))
    loop
      -- remove "deallocated" allocations as not wanted for report
      if transition ->> 'to' = 'deallocated' then
        slice := slice - -1;
      else
        slice := slice || transition;
      end if;

      -- pipe out completed slice as row
      if transition ->> 'to' in (select * from unnest(completed_states)) then
        journey := slice;
        return next;
        slice := '[]'::jsonb;
      end if;
    end loop;

    -- pipe out last slice for claim unless it already has been above (because it has a completed status)
    if transition ->> 'to' not in (select * from unnest(completed_states)) then
      journey := slice;
      return next;
    end if;
  end loop;
END
$BODY$
LANGUAGE plpgsql;
