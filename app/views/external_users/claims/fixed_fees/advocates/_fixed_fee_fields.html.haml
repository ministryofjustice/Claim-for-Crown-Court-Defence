- fee = present(f.object)
%div{ "data-target": to_slug(f.object.description), class: "fx-hook-#{fee.fee_type_code.downcase}" }
  = f.govuk_check_box :toggle,
    1,
    checked: !f.object.blank?,
    class: 'fx-checkbox-hook',
    label: { text: f.object.description } do

    .fixed-fee-group.fx-fee-group.js-block.fx-do-init{ data:{type:"fixedFees", autovat: @claim.apply_vat? ? "true" : "false", "block-type": "FeeBlockCalculator"}}
      = f.govuk_text_field :fee_type_id,
        class: 'js-fee-type',
        label: { hidden: true },
        type: 'hidden'

      - if f.object.fee_type.case_uplift?
        = f.govuk_text_field :case_numbers,
          class: 'cc-fixed-fee-case-numbers',
          hint: { text: 'Separate by commas' },
          label: { text: t('.case_numbers_html', context: f.object.description) },
          width: 'one-half'

      = f.govuk_number_field :quantity,
        class: 'quantity fee-quantity js-fee-quantity js-fee-calculator-quantity',
        form_group: { class: 'quantity_wrapper' },
        hint: { text: t('.quantity_hint') },
        label: { text: t('.quantity_html', context: f.object.description) },
        min: 1,
        value: fee.quantity,
        width: 3

      = f.govuk_number_field :rate,
        class:'rate fee-rate js-fee-calculator-rate',
        form_group: {class: 'js-unit-price-effectee calculated-unit-fee'},
        label: { text: t('.rate_html', context: f.object.description) },
        prefix_text: 'Â£',
        readonly: f.object.price_calculated?,
        value: number_with_precision(f.object.rate, precision: 2),
        width: 5

      = f.govuk_text_field :price_calculated,
        form_group: { class: 'js-fee-calculator-success' },
        label: { hidden: true },
        type: 'hidden',
        value: f.object.price_calculated?

      .fee-calc-help-wrapper.hidden
        = govuk_details(summary_text: t('.help_how_we_calculate_rate_title'), text: t('.help_how_we_calculate_rate_body'))

      .dates-wrapper
        .cocoon-insert-wrapper
          - f.object.dates_attended.build unless f.object.dates_attended.any?
          = f.fields_for :dates_attended do |date_attended|
            = render partial: 'date_attended_fields', locals: { f: date_attended, submodel_count: date_attended.index+1, parent_model_prefix: "fixed_fee_#{@fixed_fee_count}" }

        = link_to_add_association t('.add_date_attended'), f, :dates_attended, partial: 'date_attended_fields', data: { 'association-insertion-method' => 'append', 'association-insertion-node' => '.cocoon-insert-wrapper', 'association-insertion-traversal' => 'prev'}, class: 'govuk-link'

      = govuk_summary_list_no_border do
        = govuk_summary_list_row do
          = govuk_summary_list_key do
            = t('.net_amount')

          = govuk_summary_list_value(class: 'fee-net-amount total') do
            = fee.amount || number_to_currency(0)

  = f.hidden_field :_destroy, class: 'destroy', value: f.object.blank?
