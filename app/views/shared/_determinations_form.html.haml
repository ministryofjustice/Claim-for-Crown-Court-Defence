= form_with model: claim, authenticity_token: true, builder: GdsAdpFormBuilder, method: :patch, scope: :claim, url: case_workers_claim_path(claim) do |f|
  = hidden_field_tag :messages, 'true'

  .fx-assesment-hook
    #claim-status
      %h2#radio-control-heading.govuk-heading-l{ 'aria-describedby': 'radio-control-heading radio-control-legend' }
        = t('.assessment_summary')

      - if current_user_is_caseworker?
        = f.govuk_radio_buttons_fieldset :determinations,
          form_group: { classes: 'js-cw-claim-action' },
          legend: { size: 'm', text: t('.update_the_claim_status') } do

          - claim.valid_transitions_for_detail_form.each_with_index do |state, index|
            = f.govuk_radio_button :state,
              state.first,
              checked: params[:claim].present? && state.first.eql?(params[:claim][:state]&.to_sym),
              label: { text: state.second }, link_errors: index.zero? do

              - if state.first.to_s.eql?('refused')
                = f.govuk_check_boxes_fieldset :refused_reason,
                  form_group: { classes: 'js-cw-claim-refuse-reasonsxx hiddenxx' },
                  legend: { size: 's', text: t('.reason_for_refusal') } do

                  - ClaimStateTransitionReason.refuse_reasons_for(@claim).each_with_index do |reason, index|
                    = f.govuk_check_box :state_reason,
                      reason.code,
                      checked: params[:claim].present? && params[:claim][:state_reason]&.include?(reason.code),
                      label: { text: reason.description },
                      link_errors: index.zero? do

                      - if reason.code.eql?('other_refuse')
                        = f.govuk_text_field :refuse_reason_text,
                          form_group: { classes: 'js-refuse-reason-textxx hiddenxx' },
                          hint: { text: t('.reason_hint') },
                          label: { text: t('.reason_text') },
                          width: 'one-half'

              - if state.first.to_s.eql?('rejected')
                = f.govuk_check_boxes_fieldset :rejected_reason,
                  form_group: { classes: 'js-cw-claim-rejection-reasonsxx hiddenxx' },
                  legend: { size: 's', text: t('.reason_for_rejection') } do

                  - ClaimStateTransitionReason.reject_reasons_for(@claim).each_with_index do |reason, index|
                    = f.govuk_check_box :state_reason,
                      reason.code,
                      checked: params[:claim].present? && params[:claim][:state_reason]&.include?(reason.code),
                      label: { text: reason.description },
                      link_errors: index.zero? do

                      - if reason.code.eql?('other')
                        = f.govuk_text_field :reject_reason_text,
                          form_group: { classes: 'js-reject-reason-textxx hiddenxx' },
                          hint: { text: t('.reason_hint') },
                          label: { text: t('.reason_text') },
                          width: 'one-half'

      = govuk_table( id: 'determinations', class: 'js-cw-claim-assessment app-form-datatable', data: { apply_vat: "#{claim.apply_vat}", vat_url: vat_path(format: :json), submitted_date: claim.vat_date(:db), scheme: claim.agfs? ? 'agfs' : 'lgfs' }) do
        = govuk_table_caption(class: 'govuk-visually-hidden') do
          %h3.govuk-heading-m
            = t('.assessment_summary')

        = govuk_table_thead do
          = govuk_table_row do
            = govuk_table_th do
              = t('shared.description')

            = govuk_table_th_numeric do
              = t('shared.determinations_table.claimed_by', type: claim.external_user_description)

            = govuk_table_th_numeric do
              = t('shared.determinations_table.laa_heading')
              - if claim.opened_for_redetermination?
                .govuk-hint= t('.laa_heading_hint')

        = govuk_table_tbody do
          - if current_user_is_caseworker? && @claim.enable_assessment_input?
            = f.fields_for :assessment do |af|
              = render partial: 'case_workers/claims/determination_fields', locals: { f: af, claim: claim }

          - elsif current_user_is_caseworker? && @claim.enable_determination_input?
            = f.fields_for :redeterminations, claim.redeterminations.build do |rf|
              = render partial: 'case_workers/claims/determination_fields', locals: { f: rf, claim: claim }

          - elsif claim.redeterminations.any?
            = render partial: 'shared/determination_amounts', locals: { claim: claim, determination: claim.redeterminations.last }

          - else
            = render partial: 'shared/determination_amounts', locals: { claim: claim, determination: claim.assessment }

      = govuk_button(t('.update'), id: 'button')
